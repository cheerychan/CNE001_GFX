#include "cpu.h"
#include "pmp.h"
#include "timestamp_autogenerated.h"

.section .start
.global main
.global _start
.global pmp_version_str
.global build_time
_start:
	b	reset
	b	. @undef_handler
	b	. @swi_handler
	b	. @pabt_handler
	b	. @dabt_handler
	b	.
	b	irq_handler
	b	fiq_handler
pmp_flag:			.string "pmp"
pmp_version_str: 	.string PMP_VERSION  
build_time:  	 	.string PMP_DATE PMP_TIME	
.section .text
reset:
	/* Set up the stack */
stack_setup:
	@ set up stack for each mode
	ldr	r0, =STACK_TOP

	msr	cpsr_c, #(MODE_UND | I_BIT | F_BIT)
	mov	sp, r0
	sub	r0, r0, #UND_STACK_SIZE

	msr	cpsr_c, #(MODE_ABT | I_BIT | F_BIT)
	mov	sp, r0
	sub	r0, r0, #ABT_STACK_SIZE

	msr	cpsr_c, #(MODE_FIQ | I_BIT | F_BIT)
	mov	sp, r0
	sub	r0, r0, #FIQ_STACK_SIZE

	msr	cpsr_c, #(MODE_IRQ | I_BIT | F_BIT)
	mov	sp, r0
	sub	r0, r0, #IRQ_STACK_SIZE

	msr	cpsr_c, #(MODE_SYS | I_BIT | F_BIT)
	mov	sp, r0
	sub	r0, r0, #SYS_STACK_SIZE

	msr	cpsr_c, #(MODE_SVC | I_BIT | F_BIT)
	mov	sp, r0

	msr	cpsr_c, #(MODE_SVC)

	/* Clear BSS (if any). Is below tx (watch load addr - need space) */
clear_bss:
	ldr	r0, =__bss_start	@ find start of bss segment
	ldr	r1, =STACK_TOP @__bss_end		@ stop here
	mov	r2, #0x00000000		@ clear value

	cmp r0, r1
	beq skip_bss_clr
clbss_l:
	str	r2, [r0]		@ clear BSS location
	add	r0, r0, #4		@ increment clear index pointer
	cmp	r0, r1			@ are we at the end yet
	bne	clbss_l			@ keep clearing till at end

skip_bss_clr:
	ldr	pc, _start_armboot	@ jump to C code

_start_armboot:
        .word	main 

irq_handler:
	stmfd	sp!, {r0-r12, lr} @ no intr re-enter
	bl	main_irq_handler
	ldmfd	sp!, {r0-r12, lr}
	subs	pc, lr, #4

	
fiq_handler:
	b	.
		

.global wfi
wfi:
	stmfd	sp!, {r0, r1}
	ldr	r0, =PMP_REG_BASE
	ldr	r1, =PMP_CONFIG
	add	r0, r0, r1
	ldr	r1, [r0]
	orr	r1, r1, #PMP_WFI_EN
	str	r1, [r0]
	ldr	r0, =PMP_REG_BASE
	add	r0, r0, #PMP_WFI_REG
	ldr	r1, [r0]
	orr	r1, r1, #PMP_WFI
	str	r1, [r0]
	ldmfd	sp!, {r0, r1}
	mov	pc, lr

.global restart
restart:
	ldr	r0, =PMP_REG_BASE
	ldr	r1, =PMP_RESTART
	add	r0, r0, r1
	mov	r1, #0x1
	str	r1, [r0]
	mov	pc, lr

